## save ###############################################################################
#######################################################################################
dt.preprocessed <- dt.featureEngineered
save(dt.preprocessed, cols.factor, cols.numeric, cols.integer, cols.newFeatures
, cols.basicStats, cols.analysis, cols.zero
, file = "../data/BNP_Paribas_Cardif_Claims_Management/RData/dt_preprocessed.RData")
setwd("/Volumes/Data Science/Google Drive/data_science_competition/kaggle/BNP_Paribas_Cardif_Claims_Management/")
rm(list = ls()); gc();
require(data.table)
require(purrr)
require(caret)
require(xgboost)
require(Ckmeans.1d.dp)
require(Metrics)
require(ggplot2)
require(combinat)
source("utilities/preprocess.R")
source("utilities/cv.R")
load("../data/BNP_Paribas_Cardif_Claims_Management/RData/dt_preprocessed.RData")
#######################################################################################
## 3.0 train, valid, test #############################################################
#######################################################################################
cat("prepare train, valid, and test data set...\n")
set.seed(888)
ind.train <- createDataPartition(dt.preprocessed[target >= 0]$target, p = .8, list = F) # remember to change it to .66
dt.train <- dt.preprocessed[target >= 0][ind.train]
dt.valid <- dt.preprocessed[target >= 0][-ind.train]
dt.test <- dt.preprocessed[target == -1]
dim(dt.train); dim(dt.valid); dim(dt.test)
table(dt.train$target)
table(dt.valid$target)
cols.features <- names(dt.train)[!names(dt.train) %in% c("ID", "target")]
params <- list(booster = "gbtree"
, nthread = 8
, objective = "binary:logistic"
, eval_metric = "logloss"
, md = 9
, ss = .9
, mcw = 1
, csb = .5
, eta = .025)
df.summary <- myCV_xgb(dt.train
, cols.features
, dt.valid
, k = 0
, params)
df.summary
dim(dt.train)
dt.encode.factor
cols.needEncode <- names(ColUnique(dt.train[, cols.factor[! cols.factor %in% cols.newFeatures], with = F]))[ColUnique(dt.train[, cols.factor[! cols.factor %in% cols.newFeatures], with = F]) > 10]
# factor encode
dt.encode.factor <- ConvertNonNumFactorToOrderedNum(dt.train, cols.needEncode)
dt.encode.factor
table(dt.train$v79)
head(dt.train$v79)
dt.train <- data.table(A = c("A", "A", "B", "C"))
dt.test <- data.table(A = c("A", "B"))
dt.tarin
dt.train
dt.test
cols <- "A"
require(plyr)
# get the list of tabular summary
ls.table <- lapply(dt[, cols, with = F], table)
ls.table <- lapply(dt.train[, cols, with = F], table)
ls.table
ls.names <- lapply(ls.table, function(x) names(x))
colnames <- paste(cols, "_toOrderedNum", sep = "")
# get the list of the ordred numeirc representing the tabluar summary
ls.ordered <- lapply(ls.table, function(x)(frank(as.vector(x), ties.method = "dense")))
ls.names
colnames
ls.ordered
ls.replaced <- list()
n <- ls.names[[col]]
for (col in cols){
n <- ls.names[[col]]
o <- ls.ordered[[col]]
ls.replaced[[paste(col, "toOrderedNum", sep = "")]] <- mapvalues(dt[[col]], from = n, to = o)
}
col <- "A"
n <- ls.names[[col]]
n
o <- ls.ordered[[col]]
o
ls.replaced[[paste(col, "toOrderedNum", sep = "")]] <- mapvalues(dt[[col]], from = n, to = o)
ls.replaced[[paste(col, "toOrderedNum", sep = "")]] <- mapvalues(dt.train[[col]], from = n, to = o)
ls.replaced
43 * 14
ls.replaced.test[[paste(col, "toOrderedNum", sep = "")]] <- mapvalues(dt.test[[col]], from = n, to = o)
ls.replaced.test <- list()
ls.replaced.test[[paste(col, "toOrderedNum", sep = "")]] <- mapvalues(dt.test[[col]], from = n, to = o)
ls.replaced.test
ConvertNonNumFactorToOrderedNum <- function(dt.train, dt.test, cols){
require(plyr)
# get the list of tabular summary
ls.table <- lapply(dt.train[, cols, with = F], table)
# get the list of names of the tablular summary
ls.names <- lapply(ls.table, function(x) names(x))
colnames <- paste(cols, "_toOrderedNum", sep = "")
# get the list of the ordred numeirc representing the tabluar summary
ls.ordered <- lapply(ls.table, function(x)(frank(as.vector(x), ties.method = "dense")))
ls.replaced.train <- list()
ls.replaced.test <- list()
for (col in cols){
n <- ls.names[[col]]
o <- ls.ordered[[col]]
ls.replaced.train[[paste(col, "toOrderedNum", sep = "")]] <- mapvalues(dt.train[[col]], from = n, to = o)
ls.replaced.test[[paste(col, "toOrderedNum", sep = "")]] <- mapvalues(dt.test[[col]], from = n, to = o)
}
dt.replaced.train <- as.data.table(lapply(ls.replaced.train, print))
dt.replaced.test <- as.data.table(lapply(ls.replaced.test, print))
return(list(dt.replaced.train, dt.replaced.test))
}
ConvertNonNumFactorToOrderedNum(dt.train, dt.test, cols)
dt.test <- data.table(A = c("A", "E"))
ConvertNonNumFactorToOrderedNum(dt.train, dt.test, cols)
dt.replaced.test
xx <- data.table(A = c("2", "E"))
xx
grepl("[[alpha]]", xx)
grepl("[[alpha]]", "E")
grepl("[[:alpha:]]", "E")
grepl("[[:alpha:]]", xx)
grepl("[:alpha:]", xx)
require(plyr)
# get the list of tabular summary
ls.table <- lapply(dt.train[, cols, with = F], table)
# get the list of names of the tablular summary
ls.names <- lapply(ls.table, function(x) names(x))
colnames <- paste(cols, "_toOrderedNum", sep = "")
# get the list of the ordred numeirc representing the tabluar summary
ls.ordered <- lapply(ls.table, function(x)(frank(as.vector(x), ties.method = "dense")))
ls.replaced.train <- list()
ls.replaced.test <- list()
col <- "A"
n <- ls.names[[col]]
o <- ls.ordered[[col]]
ls.replaced.train[[paste(col, "toOrderedNum", sep = "")]] <- mapvalues(dt.train[[col]], from = n, to = o)
ls.replaced.test[[paste(col, "toOrderedNum", sep = "")]] <- mapvalues(dt.test[[col]], from = n, to = o)
mapvalues(dt.test[[col]], from = n, to = o)
grepl("[:alpha:]", mapvalues(dt.test[[col]], from = n, to = o))
grepl("[[:alpha:]]", mapvalues(dt.test[[col]], from = n, to = o))
mapvalues(dt.test[[col]], from = n, to = o)[grepl("[[:alpha:]]", mapvalues(dt.test[[col]], from = n, to = o))]
mapvalues(dt.test[[col]], from = n, to = o)[grepl("[[:alpha:]]", mapvalues(dt.test[[col]], from = n, to = o))] <- 0
grepl("[[:alpha:]]", ls.replaced.test[[paste(col, "toOrderedNum", sep = "")]] )
ls.replaced.test[[paste(col, "toOrderedNum", sep = "")]][grepl("[[:alpha:]]", ls.replaced.test[[paste(col, "toOrderedNum", sep = "")]] )] <- 0
ls.replaced.test[[paste(col, "toOrderedNum", sep = "")]]
setwd("/Volumes/Data Science/Google Drive/data_science_competition/kaggle/BNP_Paribas_Cardif_Claims_Management/")
rm(list = ls()); gc();
require(data.table)
require(purrr)
require(caret)
require(xgboost)
require(Ckmeans.1d.dp)
require(Metrics)
require(ggplot2)
require(combinat)
source("utilities/preprocess.R")
source("utilities/cv.R")
load("../data/BNP_Paribas_Cardif_Claims_Management/RData/dt_preprocessed.RData")
#######################################################################################
## 3.0 train, valid, test #############################################################
#######################################################################################
cat("prepare train, valid, and test data set...\n")
set.seed(888)
ind.train <- createDataPartition(dt.preprocessed[target >= 0]$target, p = .8, list = F) # remember to change it to .66
dt.train <- dt.preprocessed[target >= 0][ind.train]
dt.valid <- dt.preprocessed[target >= 0][-ind.train]
dt.test <- dt.preprocessed[target == -1]
dim(dt.train); dim(dt.valid); dim(dt.test)
table(dt.train$target)
table(dt.valid$target)
## feature engineer on train ###########################################################
## FactorRankSum
# dt.factorRank <- ConvertNonNumFactorToOrderedNum(dt.train, cols.factor[! cols.factor %in% cols.newFeatures])
# dt.factorRank <- dt.factorRank[, lapply(.SD, as.numeric)]
# pre.factorRank <- preProcess(dt.factorRank
#                              , method = c("range")
#                              , verbose = T)
# dt.factorRank.range <- predict(pre.factorRank, dt.factorRank)
# vFactorRankSum <- rowSums(dt.factorRank.range)
## encode
# columns need encoding
cols.needEncode <- names(ColUnique(dt.train[, cols.factor[! cols.factor %in% cols.newFeatures], with = F]))[ColUnique(dt.train[, cols.factor[! cols.factor %in% cols.newFeatures], with = F]) > 10]
# factor encode
dt.encode.factor <- ConvertNonNumFactorToOrderedNum(dt.train, cols.needEncode)
setnames(dt.encode.factor, names(dt.encode.factor), paste(namesd(dt.encode.factor), "_factor", sep = ""))
dt.encode.factor <- ConvertNonNumFactorToOrderedNum(dt.train, dt.valid, cols.needEncode)
dt.encode.factor
ls.encode.factor <- ConvertNonNumFactorToOrderedNum(dt.train, dt.valid, cols.needEncode)
ls.encode.factor[[1]]
head(dt.valid$v79)
ls.encode.factor[[2]]
head(dt.train$v79)
ls.encode.factor <- ConvertNonNumFactorToOrderedNum(dt.train, dt.valid, cols.needEncode)
ls.encode.factor[[2]]
require(plyr)
# get the list of tabular summary
ls.table <- lapply(dt.train[, cols, with = F], table)
cols <- "v79"
ls.table <- lapply(dt.train[, cols, with = F], table)
# get the list of names of the tablular summary
ls.names <- lapply(ls.table, function(x) names(x))
colnames <- paste(cols, "_toOrderedNum", sep = "")
# get the list of the ordred numeirc representing the tabluar summary
ls.ordered <- lapply(ls.table, function(x)(frank(as.vector(x), ties.method = "dense")))
ls.replaced.train <- list()
ls.replaced.test <- list()
ls.ordered
colnames
ls.names
ls.replaced.train <- list()
ls.replaced.test <- list()
for (col in cols){
n <- ls.names[[col]]
o <- ls.ordered[[col]]
ls.replaced.train[[paste(col, "toOrderedNum", sep = "")]] <- mapvalues(dt.train[[col]], from = n, to = o)
ls.replaced.test[[paste(col, "toOrderedNum", sep = "")]] <- mapvalues(dt.test[[col]], from = n, to = o)
# new level to be come 0 in dt.test
ls.replaced.test[[paste(col, "toOrderedNum", sep = "")]][grepl("[[:alpha:]]", ls.replaced.test[[paste(col, "toOrderedNum", sep = "")]] )] <- 0
}
col <- cols
n <- ls.names[[col]]
o <- ls.ordered[[col]]
ls.replaced.train[[paste(col, "toOrderedNum", sep = "")]] <- mapvalues(dt.train[[col]], from = n, to = o)
ls.replaced.test[[paste(col, "toOrderedNum", sep = "")]] <- mapvalues(dt.test[[col]], from = n, to = o)
# new level to be come 0 in dt.test
ls.replaced.test[[paste(col, "toOrderedNum", sep = "")]][grepl("[[:alpha:]]", ls.replaced.test[[paste(col, "toOrderedNum", sep = "")]] )] <- 0
[grepl("[[:alpha:]]", ls.replaced.test[[paste(col, "toOrderedNum", sep = "")]] )]
[grepl("[[:alpha:]]", ls.replaced.test[[paste(col, "toOrderedNum", sep = "")]])]
grepl("[[:alpha:]]", ls.replaced.test[[paste(col, "toOrderedNum", sep = "")]
)
grepl("[[:alpha:]]", ls.replaced.test[[paste(col, "toOrderedNum", sep = "")]])
sum(grepl("[[:alpha:]]", ls.replaced.test[[paste(col, "toOrderedNum", sep = "")]]))
ls.replaced.test[[paste(col, "toOrderedNum", sep = "")]]
ls.replaced.test[[paste(col, "toOrderedNum", sep = "")]]
?frank
ls.ordered <- lapply(ls.table, function(x)(frank(as.vector(x), ties.method = "dense", order = -1)))
ls.ordered <- lapply(ls.table, function(x)(frank(as.vector(x), ties.method = "dense")))
ls.replaced.test
ls.replaced.test[[1]]
cols.needEncode
table(dt.train$v79)
table(dt.test$v79)
unique(dt.train$v22toImputed)
length(unique(dt.train$v22toImputed))
length(unique(dt.test$v22toImputed))
cols.needEncode
length(unique(dt.test$v52toImputed))
length(unique(dt.train$v52toImputed))
length(unique(dt.train$v56toImputed))
length(unique(dt.test$v56toImputed))
length(unique(dt.train$v112toImputed))
length(unique(dt.test$v112toImputed))
length(unique(dt.train$v113toImputed))
length(unique(dt.test$v113toImputed))
length(unique(dt.test$v125toImputed))
length(unique(dt.train$v125toImputed))
setwd("/Volumes/Data Science/Google Drive/data_science_competition/kaggle/BNP_Paribas_Cardif_Claims_Management/")
rm(list = ls()); gc();
require(data.table)
require(purrr)
require(caret)
require(xgboost)
require(Ckmeans.1d.dp)
require(Metrics)
require(ggplot2)
require(combinat)
source("utilities/preprocess.R")
source("utilities/cv.R")
load("../data/BNP_Paribas_Cardif_Claims_Management/RData/dt_preprocessed.RData")
#######################################################################################
## 3.0 train, valid, test #############################################################
#######################################################################################
cat("prepare train, valid, and test data set...\n")
set.seed(888)
ind.train <- createDataPartition(dt.preprocessed[target >= 0]$target, p = .8, list = F) # remember to change it to .66
dt.train <- dt.preprocessed[target >= 0][ind.train]
dt.valid <- dt.preprocessed[target >= 0][-ind.train]
dt.test <- dt.preprocessed[target == -1]
dim(dt.train); dim(dt.valid); dim(dt.test)
table(dt.train$target)
table(dt.valid$target)
## feature engineer on train and valid ################################################
## FactorRankSum
# dt.factorRank <- ConvertNonNumFactorToOrderedNum(dt.train, cols.factor[! cols.factor %in% cols.newFeatures])
# dt.factorRank <- dt.factorRank[, lapply(.SD, as.numeric)]
# pre.factorRank <- preProcess(dt.factorRank
#                              , method = c("range")
#                              , verbose = T)
# dt.factorRank.range <- predict(pre.factorRank, dt.factorRank)
# vFactorRankSum <- rowSums(dt.factorRank.range)
## encode
# columns need encoding
cols.needEncode <- names(ColUnique(dt.train[, cols.factor[! cols.factor %in% cols.newFeatures], with = F]))[ColUnique(dt.train[, cols.factor[! cols.factor %in% cols.newFeatures], with = F]) > 10]
# factor encode
ls.encode.factor <- ConvertNonNumFactorToOrderedNum(dt.train, dt.valid, cols.needEncode)
dt.encode.factor.train <- ls.encode.factor[[1]]
dt.encode.factor.valid <- ls.encode.factor[[2]]
setnames(dt.encode.factor.train, names(dt.encode.factor.train), paste(namesd(dt.encode.factor.train), "_factor", sep = ""))
setnames(dt.encode.factor.valid, names(dt.encode.factor.valid), paste(namesd(dt.encode.factor.valid), "_factor", sep = ""))
# numeric encode
ls.encode.numeric <- ConvertNonNumFactorToOrderedNum(dt.train, dt.valid, cols.needEncode)
dt.encode.numeric.train <- ls.encode.numeric[[1]]
dt.encode.numeric.valid <- ls.encode.numeric[[2]]
dt.encode.numeric.train <- dt.encode.numeric.train[, lapply(.SD, as.numeric)]
dt.encode.numeric.valid <- dt.encode.numeric.valid[, lapply(.SD, as.numeric)]
setnames(dt.encode.numeric.train, names(dt.encode.numeric.train), paste(names(dt.encode.numeric.train), "_numeric", sep = ""))
setnames(dt.encode.numeric.valid, names(dt.encode.numeric.valid), paste(names(dt.encode.numeric.valid), "_numeric", sep = ""))
# remove original vars and cbind the encoded vars
dt.train <- dt.train[, names(dt.train)[!names(dt.train) %in% cols.needEncode], with = F]
dt.valid <- dt.valid[, names(dt.valid)[!names(dt.valid) %in% cols.needEncode], with = F]
cols.factor <- cols.factor[!cols.factor %in% cols.needEncode]
dt.train <- cbind(dt.train, dt.encode.factor.train, dt.encode.numeric.train)
dt.valid <- cbind(dt.valid, dt.encode.factor.valid, dt.encode.numeric)
cols.factor <- c(cols.factor, names(dt.encode.factor))
cols.numeric <- c(cols.numeric, names(dt.encode.numeric))
dim(dt.train); dim(dt.valid)
dt.valid <- cbind(dt.valid, dt.encode.factor.valid, dt.encode.numeric.valid)
cols.factor <- c(cols.factor, names(dt.encode.factor.train))
cols.numeric <- c(cols.numeric, names(dt.encode.numeric.train))
dt.valid <- cbind(dt.valid, dt.encode.factor.valid, dt.encode.numeric.valid)
dim(dt.train); dim(dt.valid)
setwd("/Volumes/Data Science/Google Drive/data_science_competition/kaggle/BNP_Paribas_Cardif_Claims_Management/")
rm(list = ls()); gc();
require(data.table)
require(purrr)
require(caret)
require(xgboost)
require(Ckmeans.1d.dp)
require(Metrics)
require(ggplot2)
require(combinat)
source("utilities/preprocess.R")
source("utilities/cv.R")
load("../data/BNP_Paribas_Cardif_Claims_Management/RData/dt_preprocessed.RData")
#######################################################################################
## 3.0 train, valid, test #############################################################
#######################################################################################
cat("prepare train, valid, and test data set...\n")
set.seed(888)
ind.train <- createDataPartition(dt.preprocessed[target >= 0]$target, p = .8, list = F) # remember to change it to .66
dt.train <- dt.preprocessed[target >= 0][ind.train]
dt.valid <- dt.preprocessed[target >= 0][-ind.train]
dt.test <- dt.preprocessed[target == -1]
dim(dt.train); dim(dt.valid); dim(dt.test)
table(dt.train$target)
table(dt.valid$target)
## feature engineer on train and valid ################################################
## FactorRankSum
# dt.factorRank <- ConvertNonNumFactorToOrderedNum(dt.train, cols.factor[! cols.factor %in% cols.newFeatures])
# dt.factorRank <- dt.factorRank[, lapply(.SD, as.numeric)]
# pre.factorRank <- preProcess(dt.factorRank
#                              , method = c("range")
#                              , verbose = T)
# dt.factorRank.range <- predict(pre.factorRank, dt.factorRank)
# vFactorRankSum <- rowSums(dt.factorRank.range)
## encode
# columns need encoding
cols.needEncode <- names(ColUnique(dt.train[, cols.factor[! cols.factor %in% cols.newFeatures], with = F]))[ColUnique(dt.train[, cols.factor[! cols.factor %in% cols.newFeatures], with = F]) > 10]
# factor encode
ls.encode.factor <- ConvertNonNumFactorToOrderedNum(dt.train, dt.valid, cols.needEncode)
dt.encode.factor.train <- ls.encode.factor[[1]]
dt.encode.factor.valid <- ls.encode.factor[[2]]
setnames(dt.encode.factor.train, names(dt.encode.factor.train), paste(namesd(dt.encode.factor.train), "_factor", sep = ""))
setnames(dt.encode.factor.valid, names(dt.encode.factor.valid), paste(namesd(dt.encode.factor.valid), "_factor", sep = ""))
# numeric encode
ls.encode.numeric <- ConvertNonNumFactorToOrderedNum(dt.train, dt.valid, cols.needEncode)
dt.encode.numeric.train <- ls.encode.numeric[[1]]
dt.encode.numeric.valid <- ls.encode.numeric[[2]]
dt.encode.numeric.train <- dt.encode.numeric.train[, lapply(.SD, as.numeric)]
dt.encode.numeric.valid <- dt.encode.numeric.valid[, lapply(.SD, as.numeric)]
setnames(dt.encode.numeric.train, names(dt.encode.numeric.train), paste(names(dt.encode.numeric.train), "_numeric", sep = ""))
setnames(dt.encode.numeric.valid, names(dt.encode.numeric.valid), paste(names(dt.encode.numeric.valid), "_numeric", sep = ""))
# remove original vars and cbind the encoded vars
dt.train <- dt.train[, names(dt.train)[!names(dt.train) %in% cols.needEncode], with = F]
dt.valid <- dt.valid[, names(dt.valid)[!names(dt.valid) %in% cols.needEncode], with = F]
cols.factor <- cols.factor[!cols.factor %in% cols.needEncode]
dt.train <- cbind(dt.train, dt.encode.factor.train, dt.encode.numeric.train)
dt.valid <- cbind(dt.valid, dt.encode.factor.valid, dt.encode.numeric.valid)
cols.factor <- c(cols.factor, names(dt.encode.factor.train))
cols.numeric <- c(cols.numeric, names(dt.encode.numeric.train))
dim(dt.train); dim(dt.valid)
cols.features <- names(dt.train)[!names(dt.train) %in% c("ID", "target")]
params <- list(booster = "gbtree"
, nthread = 8
, objective = "binary:logistic"
, eval_metric = "logloss"
, md = 9
, ss = .9
, mcw = 1
, csb = .5
, eta = .025)
df.summary <- myCV_xgb(dt.train
, cols.features
, dt.valid
, k = 0
, params)
df.summary
dt.train
dt.encode.factor.train
dt.encode.factor.valid
dt.encode.numeric.train
cols.needEncode <- names(ColUnique(dt.train[, cols.factor[! cols.factor %in% cols.newFeatures], with = F]))[ColUnique(dt.train[, cols.factor[! cols.factor %in% cols.newFeatures], with = F]) > 10]
# factor encode
ls.encode.factor <- ConvertNonNumFactorToOrderedNum(dt.train, dt.valid, cols.needEncode)
dt.encode.factor.train <- ls.encode.factor[[1]]
dt.encode.factor.valid <- ls.encode.factor[[2]]
setnames(dt.encode.factor.train, names(dt.encode.factor.train), paste(namesd(dt.encode.factor.train), "_factor", sep = ""))
setnames(dt.encode.factor.valid, names(dt.encode.factor.valid), paste(namesd(dt.encode.factor.valid), "_factor", sep = ""))
# numeric encode
ls.encode.numeric <- ConvertNonNumFactorToOrderedNum(dt.train, dt.valid, cols.needEncode)
dt.encode.numeric.train <- ls.encode.numeric[[1]]
dt.encode.numeric.valid <- ls.encode.numeric[[2]]
dt.encode.numeric.train <- dt.encode.numeric.train[, lapply(.SD, as.numeric)]
dt.encode.numeric.valid <- dt.encode.numeric.valid[, lapply(.SD, as.numeric)]
setnames(dt.encode.numeric.train, names(dt.encode.numeric.train), paste(names(dt.encode.numeric.train), "_numeric", sep = ""))
setnames(dt.encode.numeric.valid, names(dt.encode.numeric.valid), paste(names(dt.encode.numeric.valid), "_numeric", sep = ""))
# remove original vars and cbind the encoded vars
dt.train <- dt.train[, names(dt.train)[!names(dt.train) %in% cols.needEncode], with = F]
dt.valid <- dt.valid[, names(dt.valid)[!names(dt.valid) %in% cols.needEncode], with = F]
cols.factor <- cols.factor[!cols.factor %in% cols.needEncode]
dt.train <- cbind(dt.train, dt.encode.factor.train, dt.encode.numeric.train)
dt.valid <- cbind(dt.valid, dt.encode.factor.valid, dt.encode.numeric.valid)
cols.factor <- c(cols.factor, names(dt.encode.factor.train))
cols.numeric <- c(cols.numeric, names(dt.encode.numeric.train))
dim(dt.train); dim(dt.valid)
dt.encode.factor.train
setwd("/Volumes/Data Science/Google Drive/data_science_competition/kaggle/BNP_Paribas_Cardif_Claims_Management/")
rm(list = ls()); gc();
require(data.table)
require(purrr)
require(caret)
require(xgboost)
require(Ckmeans.1d.dp)
require(Metrics)
require(ggplot2)
require(combinat)
source("utilities/preprocess.R")
source("utilities/cv.R")
load("../data/BNP_Paribas_Cardif_Claims_Management/RData/dt_preprocessed.RData")
#######################################################################################
## 3.0 train, valid, test #############################################################
#######################################################################################
cat("prepare train, valid, and test data set...\n")
set.seed(888)
ind.train <- createDataPartition(dt.preprocessed[target >= 0]$target, p = .8, list = F) # remember to change it to .66
dt.train <- dt.preprocessed[target >= 0][ind.train]
dt.valid <- dt.preprocessed[target >= 0][-ind.train]
dt.test <- dt.preprocessed[target == -1]
dim(dt.train); dim(dt.valid); dim(dt.test)
table(dt.train$target)
table(dt.valid$target)
## feature engineer on train and valid ################################################
## FactorRankSum
# dt.factorRank <- ConvertNonNumFactorToOrderedNum(dt.train, cols.factor[! cols.factor %in% cols.newFeatures])
# dt.factorRank <- dt.factorRank[, lapply(.SD, as.numeric)]
# pre.factorRank <- preProcess(dt.factorRank
#                              , method = c("range")
#                              , verbose = T)
# dt.factorRank.range <- predict(pre.factorRank, dt.factorRank)
# vFactorRankSum <- rowSums(dt.factorRank.range)
## encode
# columns need encoding
cols.needEncode <- names(ColUnique(dt.train[, cols.factor[! cols.factor %in% cols.newFeatures], with = F]))[ColUnique(dt.train[, cols.factor[! cols.factor %in% cols.newFeatures], with = F]) > 10]
# factor encode
ls.encode.factor <- ConvertNonNumFactorToOrderedNum(dt.train, dt.valid, cols.needEncode)
dt.encode.factor.train <- ls.encode.factor[[1]]
dt.encode.factor.valid <- ls.encode.factor[[2]]
setnames(dt.encode.factor.train, names(dt.encode.factor.train), paste(namesd(dt.encode.factor.train), "_factor", sep = ""))
setnames(dt.encode.factor.valid, names(dt.encode.factor.valid), paste(namesd(dt.encode.factor.valid), "_factor", sep = ""))
# numeric encode
ls.encode.numeric <- ConvertNonNumFactorToOrderedNum(dt.train, dt.valid, cols.needEncode)
dt.encode.numeric.train <- ls.encode.numeric[[1]]
dt.encode.numeric.valid <- ls.encode.numeric[[2]]
dt.encode.numeric.train <- dt.encode.numeric.train[, lapply(.SD, as.numeric)]
dt.encode.numeric.valid <- dt.encode.numeric.valid[, lapply(.SD, as.numeric)]
setnames(dt.encode.numeric.train, names(dt.encode.numeric.train), paste(names(dt.encode.numeric.train), "_numeric", sep = ""))
setnames(dt.encode.numeric.valid, names(dt.encode.numeric.valid), paste(names(dt.encode.numeric.valid), "_numeric", sep = ""))
# remove original vars and cbind the encoded vars
dt.train <- dt.train[, names(dt.train)[!names(dt.train) %in% cols.needEncode], with = F]
dt.valid <- dt.valid[, names(dt.valid)[!names(dt.valid) %in% cols.needEncode], with = F]
cols.factor <- cols.factor[!cols.factor %in% cols.needEncode]
dt.train <- cbind(dt.train, dt.encode.factor.train, dt.encode.numeric.train)
dt.valid <- cbind(dt.valid, dt.encode.factor.valid, dt.encode.numeric.valid)
cols.factor <- c(cols.factor, names(dt.encode.factor.train))
cols.numeric <- c(cols.numeric, names(dt.encode.numeric.train))
dim(dt.train); dim(dt.valid)
#######################################################################################
dmx.train <- xgb.DMatrix(data = data.matrix(dt.train[, !c("ID", "target"), with = F]), label = dt.train$target)
dmx.valid <- xgb.DMatrix(data = data.matrix(dt.valid[, !c("ID", "target"), with = F]), label = dt.valid$target)
x.test <- data.matrix(dt.test[, !c("ID", "target"), with = F])
#######################################################################################
## 2.0 cv #############################################################################
#######################################################################################
cols.features <- names(dt.train)[!names(dt.train) %in% c("ID", "target")]
params <- list(booster = "gbtree"
, nthread = 8
, objective = "binary:logistic"
, eval_metric = "logloss"
, md = 9
, ss = .9
, mcw = 1
, csb = .5
, eta = .025)
df.summary <- myCV_xgb(dt.train
, cols.features
, dt.valid
, k = 0
, params)
df.summary
