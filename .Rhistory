# [49] "v58"  "v59"  "v60"  "v61"  "v63"  "v64"  "v65"  "v67"  "v68"  "v69"  "v70"  "v73"  "v76"  "v77"  "v78"  "v80"
# [65] "v81"  "v82"  "v83"  "v84"  "v85"  "v86"  "v87"  "v88"  "v89"  "v90"  "v92"  "v93"  "v94"  "v95"  "v96"  "v97"
# [81] "v98"  "v99"  "v100" "v101" "v102" "v103" "v104" "v105" "v106" "v108" "v109" "v111" "v114" "v115" "v116" "v117"
# [97] "v118" "v119" "v120" "v121" "v122" "v123" "v124" "v126" "v127" "v128" "v130" "v131"
ColNAs(dt.explored[, cols.na.numeric, with = F], method = "mean")
# v1   v2   v4   v5   v6   v7   v8   v9  v10  v11  v12  v13  v14  v15  v16  v17  v18  v19  v20  v21  v23  v25  v26  v27
# 0.44 0.44 0.44 0.43 0.44 0.44 0.43 0.44 0.00 0.44 0.00 0.44 0.00 0.44 0.44 0.44 0.44 0.44 0.44 0.01 0.44 0.43 0.44 0.44
# v28  v29  v32  v33  v34  v35  v36  v37  v39  v40  v41  v42  v43  v44  v45  v46  v48  v49  v50  v51  v53  v54  v55  v57
# 0.44 0.44 0.44 0.44 0.00 0.44 0.43 0.44 0.44 0.00 0.44 0.44 0.44 0.44 0.44 0.43 0.44 0.44 0.00 0.44 0.44 0.43 0.44 0.44
# v58  v59  v60  v61  v63  v64  v65  v67  v68  v69  v70  v73  v76  v77  v78  v80  v81  v82  v83  v84  v85  v86  v87  v88
# 0.44 0.44 0.44 0.44 0.43 0.44 0.44 0.44 0.44 0.44 0.43 0.44 0.44 0.44 0.44 0.44 0.43 0.43 0.44 0.44 0.44 0.44 0.43 0.44
# v89  v90  v92  v93  v94  v95  v96  v97  v98  v99 v100 v101 v102 v103 v104 v105 v106 v108 v109 v111 v114 v115 v116 v117
# 0.43 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.43 0.44 0.44 0.44 0.45 0.44 0.44 0.43 0.44 0.43 0.43 0.44 0.00 0.44 0.44 0.43
# v118 v119 v120 v121 v122 v123 v124 v126 v127 v128 v130 v131
# 0.44 0.44 0.44 0.44 0.44 0.44 0.43 0.44 0.44 0.43 0.44 0.44
## create features for NAs
vNaFactor <- rowSums(is.na(dt.explored[, cols.na.factor, with = F]))
vNaNumeric <- rowSums(is.na(dt.explored[, cols.na.numeric, with = F]))
vNa <- rowSums(is.na(dt.explored))
cols.numeric <- c(cols.numeric, c("vNaFactor", "vNaNumeric", "vNa"))
## impute with median
ls.imputed <- MyImpute(dt.explored, c(cols.na.numeric, cols.na.factor), impute_type = "median")
## remove original vars and cbind the imputed vars
dt.explored <- dt.explored[, names(dt.explored)[!names(dt.explored) %in% c(cols.na.numeric, cols.na.factor)] , with = F]
cols.numeric <- cols.numeric[!cols.numeric %in% cols.na.numeric]
cols.factor <- cols.factor[!cols.factor %in% cols.na.factor]
dt.explored <- cbind(dt.explored, ls.imputed[[1]])
cols.numeric <- c(cols.numeric, paste(cols.na.numeric, "toImputed", sep = ""))
cols.factor <- c(cols.factor, paste(cols.na.factor, "toImputed", sep = ""))
## cbind the created features about NAs
dt.explored <- cbind(dt.explored, vNaFactor, vNaNumeric, vNa)
dim(dt.explored)
dim(dt.explored)
cols.numeric
cols.factor
is.na(dt.explored)
sum(is.na(dt.explored))
save(dt.imputed, cols.factor, cols.numeric, cols.integer, file = "../data/BNP_Paribas_Cardif_Claims_Management/RData/dt_imputed.RData")
dt.imputed <- dt.explored
save(dt.imputed, cols.factor, cols.numeric, cols.integer, file = "../data/BNP_Paribas_Cardif_Claims_Management/RData/dt_imputed.RData")
file.edit("src/4_preprocess.RData")
file.edit("src/4_preprocess.R")
file.edit("src/4_featureEngineer.R")
setwd("/Volumes/Data Science/Google Drive/data_science_competition/kaggle/BNP_Paribas_Cardif_Claims_Management/")
rm(list = ls()); gc();
require(data.table)
require(purrr)
source("utilities/preprocess.R")
load("../data/BNP_Paribas_Cardif_Claims_Management/RData/dt_imputed.RData")
#######################################################################################
## 1.0 impute #########################################################################
#######################################################################################
dt.imputed
file.edit("README.md")
ColUnique(dt.imputed[, cols.factor, with = F])
cols.needEncode <- names(ColUnique(dt.imputed[, cols.factor, with = F]))[ColUnique(dt.imputed[, cols.factor, with = F]) >= 20]
cols.needEncode
dt.encode <- ConvertNonNumFactorToOrderedNum(dt.imputed, cols.needEncode)
dt.encode
class(dt.encode$v22toImputedtoOrderedNum)
dt.encode.factor <- ConvertNonNumFactorToOrderedNum(dt.imputed, cols.needEncode)
dt.encode.factor[, lapply(.SD, as.numeric)]
dt.encode.numeric <- dt.encode.factor[, lapply(.SD, as.numeric)]
class(dt.encode.numeric$v22toImputedtoOrderedNum)
setnames(dt.encode.factor, names(dt.encode.factor), paste(names(dt.encode.factor), "_factor", sep = ""))
dt.encode.factor
dt.encode <- ConvertNonNumFactorToOrderedNum(dt.imputed, cols.needEncode)
dt.encode.factor <- dt.encode
setnames(dt.encode.factor, names(dt.encode.factor), paste(names(dt.encode.factor), "_factor", sep = ""))
# numeric encod
dt.encode.numeric <- dt.encode[, lapply(.SD, as.numeric)]
setnames(dt.encode.numeric, names(dt.encode.numeric), paste(names(dt.encode.numeric), "_numeric", sep = ""))
dt.encode.numeric
setwd("/Volumes/Data Science/Google Drive/data_science_competition/kaggle/BNP_Paribas_Cardif_Claims_Management/")
rm(list = ls()); gc();
require(data.table)
require(purrr)
source("utilities/preprocess.R")
load("../data/BNP_Paribas_Cardif_Claims_Management/RData/dt_imputed.RData")
#######################################################################################
## 1.0 encode #########################################################################
#######################################################################################
# columns need encoding
cols.needEncode <- names(ColUnique(dt.imputed[, cols.factor, with = F]))[ColUnique(dt.imputed[, cols.factor, with = F]) >= 20]
# factor encode
dt.encode <- ConvertNonNumFactorToOrderedNum(dt.imputed, cols.needEncode)
dt.encode
dt.encode.factor <- dt.encode
setnames(dt.encode.factor, names(dt.encode.factor), paste(names(dt.encode.factor), "_factor", sep = ""))
dt.encode.factor
dt.encode.numeric <- dt.encode[, lapply(.SD, as.numeric)]
dt.encode.numeric
dt.encode
setwd("/Volumes/Data Science/Google Drive/data_science_competition/kaggle/BNP_Paribas_Cardif_Claims_Management/")
rm(list = ls()); gc();
require(data.table)
require(purrr)
source("utilities/preprocess.R")
load("../data/BNP_Paribas_Cardif_Claims_Management/RData/dt_imputed.RData")
#######################################################################################
## 1.0 encode #########################################################################
#######################################################################################
# columns need encoding
cols.needEncode <- names(ColUnique(dt.imputed[, cols.factor, with = F]))[ColUnique(dt.imputed[, cols.factor, with = F]) >= 20]
# factor encode
dt.encode <- ConvertNonNumFactorToOrderedNum(dt.imputed, cols.needEncode)
dt.encode.factor <- dt.encode
setnames(dt.encode.factor, names(dt.encode), paste(names(dt.encode), "_factor", sep = ""))
# numeric encod
dt.encode.numeric <- dt.encode[, lapply(.SD, as.numeric)]
setnames(dt.encode.numeric, names(dt.encode), paste(names(dt.encode), "_numeric", sep = ""))
dt.encode.numeric
dt.encode.factor
dt.encode
setwd("/Volumes/Data Science/Google Drive/data_science_competition/kaggle/BNP_Paribas_Cardif_Claims_Management/")
rm(list = ls()); gc();
require(data.table)
require(purrr)
source("utilities/preprocess.R")
load("../data/BNP_Paribas_Cardif_Claims_Management/RData/dt_imputed.RData")
#######################################################################################
## 1.0 encode #########################################################################
#######################################################################################
# columns need encoding
cols.needEncode <- names(ColUnique(dt.imputed[, cols.factor, with = F]))[ColUnique(dt.imputed[, cols.factor, with = F]) >= 20]
# factor encode
dt.encode <- ConvertNonNumFactorToOrderedNum(dt.imputed, cols.needEncode)
dt.encode
dt.encode.factor <- dt.encode
dt.encode
dt.encode.factor
setnames(dt.encode.factor, names(dt.encode), paste(names(dt.encode), "_factor", sep = ""))
dt.encode
dt.encode.factor
dt.encode.numeric <- ConvertNonNumFactorToOrderedNum(dt.imputed, cols.needEncode)
dt.encode.numeric <- dt.encode.numeric[, lapply(.SD, as.numeric)]
setnames(dt.encode.numeric, names(dt.encode), paste(names(dt.encode), "_numeric", sep = ""))
rm(list = ls()); gc();
require(data.table)
require(purrr)
source("utilities/preprocess.R")
load("../data/BNP_Paribas_Cardif_Claims_Management/RData/dt_imputed.RData")
#######################################################################################
## 1.0 encode #########################################################################
#######################################################################################
# columns need encoding
cols.needEncode <- names(ColUnique(dt.imputed[, cols.factor, with = F]))[ColUnique(dt.imputed[, cols.factor, with = F]) >= 20]
# factor encode
dt.encode.factor <- ConvertNonNumFactorToOrderedNum(dt.imputed, cols.needEncode)
setnames(dt.encode.factor, names(dt.encode.factor), paste(names(dt.encode.factor), "_factor", sep = ""))
# numeric encod
dt.encode.factor
dt.encode.numeric <- ConvertNonNumFactorToOrderedNum(dt.imputed, cols.needEncode)
dt.encode.numeric <- dt.encode.numeric[, lapply(.SD, as.numeric)]
setnames(dt.encode.numeric, names(dt.encode.numeric), paste(names(dt.encode.numeric), "_numeric", sep = ""))
dt.encode.numeric
cols.factor <- c(cols.factor, names(dt.encode.factor))
cols.numeric <- c(cols.numeric, names(dt.encode.numeric))
dt.imputed <- dt.imputed[, names(dt.imputed)[!names(dt.imputed) %in% cols.needEncode], with = F]
cols.factor <- cols.factor[!cols.factor %in% cols.needEncode]
dt.imputed <- cbind(dt.imputed, dt.encode.factor, dt.encode.numeric)
dt.imputed
dim(dt.imputed)
dt.train.raw <- fread("../data/BNP_Paribas_Cardif_Claims_Management/train.csv", stringsAsFactors = T, na.strings = c("NA", ""))
str(dt.train.raw)
cols.integer
hist(dt.imputed$v1)
class(dt.imputed$v1)
class(dt.imputed$v1toImputed)
hist(dt.imputed$v1toImputed)
hist(dt.imputed$v2toImputed)
hist(dt.imputed$v3toImputed)
hist(dt.imputed$v4toImputed)
hist(dt.imputed$v5toImputed)
hist(dt.imputed$v6toImputed)
hist(dt.imputed$v7toImputed)
hist(dt.imputed$v8toImputed)
hist(dt.imputed$v9toImputed)
hist(dt.imputed$v10toImputed)
lapply(dt.imputed, function(x) sum(x < 0))
lapply(dt.imputed, function(x) sum(x < 0, na.rm = T))
unlist(lapply(dt.imputed, function(x) sum(x < 0, na.rm = T)))
unlist(lapply(dt.imputed[, cols.numeric, with = F], function(x) sum(x < 0, na.rm = T)))
unlist(lapply(dt.imputed[, cols.numeric, with = F], function(x) sum(x == 0, na.rm = T)))
hist(dt.imputed$v124toImputed)
sum(dt.imputed$v124toImputed == 0)
str(dt.train.raw)
unlist(lapply(dt.imputed[, cols.integer, with = F], function(x) sum(x == 0, na.rm = T)))
cols.integer
hist(dt.imputed$v38)
hist(dt.imputed$v62)
hist(dt.imputed$v72)
hist(dt.imputed$v129)
unlist(lapply(dt.imputed[, cols.integer, with = F], function(x) sum(x == 0, na.rm = T)))
rowSums(dt.imputed[, !c("ID", "target"), with = F] == 0)
rowSums(dt.imputed[, cols.integer, with = F] == 0)
vIntegerZero <- rowSums(dt.imputed[, cols.integer, with = F] == 0)
dt.imputed[, vIntegerZero := vIntegerZero]
dt.imputed
cols.numeric <- c(cols.numeric, "vIntegerZero")
head(dt.imputed$v91toImputed)
head(dt.imputed$107v107toImputed)
head(dt.imputed$v107toImputed)
require(caret)
findLinearCombos(dt.imputed)
sum(is.na(dt.imputed))
sum(is.infinite(dt.imputed))
is.infinite(dt.imputed)
unlist(lapply(dt.imputed, is.infinite))
sum(is.nan(dt.imputed))
sum(unlist(lapply(dt.imputed, is.infinite)))
sum(unlist(lapply(dt.imputed, is.nan)))
is.nan(c(1, 2, 3, 4))
unlist(lapply(dt.imputed, is.nan))
apply(dt.imputed, 2, is.nan)
sum(apply(dt.imputed, 2, is.nan))
sum(apply(dt.imputed, 2, is.infinite))
findLinearCombos(dt.imputed)
m <- model.matrix(dt.imputed)
?model.matrix
m <- model.matrix(target ~., dt.imputed)
head(m)
dim(m)
findLinearCombos(model.matrix(target ~., dt.imputed))
table(dt.imputed$v112toImputedtoOrderedNum_numeric)
table(dt.imputed$v91)
table(dt.imputed$v107)
table(dt.imputed$v107)[order(table(dt.imputed$v107))]
as.vector(table(dt.imputed$v107)[order(table(dt.imputed$v107))])
lapply(dt.imputed[, cols.factor, with = F], function(x) as.vector(table(x)[order(table(x))]))
dt.imputed[, "v107toImputed" := NULL]
summary(dt.imputed$v24)
summary(dt.imputed$v125toImputedtoOrderedNum_numeric)
as.vector(summary(dt.imputed$v125toImputedtoOrderedNum_numeric))
cols.factor
cols.numeric
lapply(dt.imputed[, cols.numeric, with = F], function(x) as.vector(summary(x))
)
dt.featureEngineered <- dt.imputed
save(dt.featureEngineered, cols.factor, cols.numeric, cols.integer, file = "../data/BNP_Paribas_Cardif_Claims_Management/RData/dt_featureEngineered.RData")
cor(dt.featureEngineered$v71, dt.featureEngineered$v75)
class(dt.featureEngineered$v71)
table(dt.featureEngineered$v71)
table(dt.featureEngineered$v75)
hist(dt.featureEngineered$v71)
table(dt.featureEngineered$v79)
table(dt.featureEngineered$v71)
table(dt.featureEngineered$v47)
table(dt.featureEngineered$v10toImputed)
hist(dt.featureEngineered$v10)
hist(dt.featureEngineered$v10toImputed)
hist(dt.featureEngineered$v31toImputed)
table(dt.featureEngineered$v31toImputed)
dt.featureEngineered
paste0('xgb_leaf_', 1:16)
rowMeans(dt.imputed[, cols.integer, with = F])
as.factor(rowMeans(dt.imputed[, cols.integer, with = F]))
table(as.factor(rowMeans(dt.imputed[, cols.integer, with = F])))
cor(rowMeans(dt.imputed[, cols.integer, with = F]), dt.imputed$target)
plot(rowMeans(dt.imputed[, cols.integer, with = F]), dt.imputed$target)
plot(rowMeans(dt.imputed[, cols.integer, with = F])[1:500], dt.imputed$target[1:500])
plot(rowMeans(dt.imputed[, cols.integer, with = F])[1:100], dt.imputed$target[1:100])
require(caTools)
colAUC(rowMeans(dt.imputed[, cols.integer, with = F]), dt.imputed$target)
plot(as.factor(rowMeans(dt.imputed[, cols.integer, with = F]), dt.imputed$target))
plot(as.factor(rowMeans(dt.imputed[, cols.integer, with = F])), dt.imputed$target)
vIntMean <- rowMeans(dt.imputed[, cols.integer, with = F])
apply(dt.imputed[, cols.integer, with = F], 1, max)
vIntMax <- apply(dt.imputed[, cols.integer, with = F], 1, max)
vIntMean
vIntMin <- apply(dt.imputed[], cols.integer, with = F], 1, min)
vIntMin <- apply(dt.imputed[, cols.integer, with = F], 1, min)
vIntSd <- apply(dt.imputed[, cols.integer, with = F], 1, sd)
vNumMean <- rowMeans(dt.imputed[, cols.numeric, with = F])
vNumMax <- apply(dt.imputed[, cols.numeric, with = F], 1, max)
vNumMin <- apply(dt.imputed[, cols.numeric, with = F], 1, min)
vNumSd <- apply(dt.imputed[, cols.numeric, with = F], 1, sd)
cols.integer
cols.numeric
cols.newFeatures <- c("vNaFactor", "vNaNumeric", "vNa")
setwd("/Volumes/Data Science/Google Drive/data_science_competition/kaggle/BNP_Paribas_Cardif_Claims_Management/")
rm(list = ls()); gc();
require(data.table)
require(purrr)
source("utilities/preprocess.R")
load("../data/BNP_Paribas_Cardif_Claims_Management/RData/dt_explored.RData")
#######################################################################################
## 1.0 impute #########################################################################
#######################################################################################
cols.na <- ColNAs(dt.explored, output = "nonZero")
cols.na <- names(cols.na)
## factor NA columns
cols.na.factor <- intersect(cols.factor, cols.na)
# [1] "v3"   "v22"  "v30"  "v31"  "v52"  "v56"  "v91"  "v107" "v112" "v113" "v125"
ColNAs(dt.explored[, cols.na.factor, with = F], method = "mean")
# v3  v22  v30  v31  v52  v56  v91 v107 v112 v113 v125
# 0.03 0.00 0.53 0.03 0.00 0.06 0.00 0.00 0.00 0.48 0.00
## integer NA columns
cols.na.integer <- intersect(cols.integer, cols.na)
# character(0)
## numeric NA columns
cols.na.numeric <- intersect(cols.numeric, cols.na)
# [1] "v1"   "v2"   "v4"   "v5"   "v6"   "v7"   "v8"   "v9"   "v10"  "v11"  "v12"  "v13"  "v14"  "v15"  "v16"  "v17"
# [17] "v18"  "v19"  "v20"  "v21"  "v23"  "v25"  "v26"  "v27"  "v28"  "v29"  "v32"  "v33"  "v34"  "v35"  "v36"  "v37"
# [33] "v39"  "v40"  "v41"  "v42"  "v43"  "v44"  "v45"  "v46"  "v48"  "v49"  "v50"  "v51"  "v53"  "v54"  "v55"  "v57"
# [49] "v58"  "v59"  "v60"  "v61"  "v63"  "v64"  "v65"  "v67"  "v68"  "v69"  "v70"  "v73"  "v76"  "v77"  "v78"  "v80"
# [65] "v81"  "v82"  "v83"  "v84"  "v85"  "v86"  "v87"  "v88"  "v89"  "v90"  "v92"  "v93"  "v94"  "v95"  "v96"  "v97"
# [81] "v98"  "v99"  "v100" "v101" "v102" "v103" "v104" "v105" "v106" "v108" "v109" "v111" "v114" "v115" "v116" "v117"
# [97] "v118" "v119" "v120" "v121" "v122" "v123" "v124" "v126" "v127" "v128" "v130" "v131"
ColNAs(dt.explored[, cols.na.numeric, with = F], method = "mean")
# v1   v2   v4   v5   v6   v7   v8   v9  v10  v11  v12  v13  v14  v15  v16  v17  v18  v19  v20  v21  v23  v25  v26  v27
# 0.44 0.44 0.44 0.43 0.44 0.44 0.43 0.44 0.00 0.44 0.00 0.44 0.00 0.44 0.44 0.44 0.44 0.44 0.44 0.01 0.44 0.43 0.44 0.44
# v28  v29  v32  v33  v34  v35  v36  v37  v39  v40  v41  v42  v43  v44  v45  v46  v48  v49  v50  v51  v53  v54  v55  v57
# 0.44 0.44 0.44 0.44 0.00 0.44 0.43 0.44 0.44 0.00 0.44 0.44 0.44 0.44 0.44 0.43 0.44 0.44 0.00 0.44 0.44 0.43 0.44 0.44
# v58  v59  v60  v61  v63  v64  v65  v67  v68  v69  v70  v73  v76  v77  v78  v80  v81  v82  v83  v84  v85  v86  v87  v88
# 0.44 0.44 0.44 0.44 0.43 0.44 0.44 0.44 0.44 0.44 0.43 0.44 0.44 0.44 0.44 0.44 0.43 0.43 0.44 0.44 0.44 0.44 0.43 0.44
# v89  v90  v92  v93  v94  v95  v96  v97  v98  v99 v100 v101 v102 v103 v104 v105 v106 v108 v109 v111 v114 v115 v116 v117
# 0.43 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.43 0.44 0.44 0.44 0.45 0.44 0.44 0.43 0.44 0.43 0.43 0.44 0.00 0.44 0.44 0.43
# v118 v119 v120 v121 v122 v123 v124 v126 v127 v128 v130 v131
# 0.44 0.44 0.44 0.44 0.44 0.44 0.43 0.44 0.44 0.43 0.44 0.44
## create features for NAs
vNaFactor <- rowSums(is.na(dt.explored[, cols.na.factor, with = F]))
vNaNumeric <- rowSums(is.na(dt.explored[, cols.na.numeric, with = F]))
vNa <- rowSums(is.na(dt.explored))
cols.numeric <- c(cols.numeric, c("vNaFactor", "vNaNumeric", "vNa"))
cols.newFeatures <- c("vNaFactor", "vNaNumeric", "vNa")
## impute with median
ls.imputed <- MyImpute(dt.explored, c(cols.na.numeric, cols.na.factor), impute_type = "median")
## remove original vars and cbind the imputed vars
dt.explored <- dt.explored[, names(dt.explored)[!names(dt.explored) %in% c(cols.na.numeric, cols.na.factor)] , with = F]
cols.numeric <- cols.numeric[!cols.numeric %in% cols.na.numeric]
cols.factor <- cols.factor[!cols.factor %in% cols.na.factor]
dt.explored <- cbind(dt.explored, ls.imputed[[1]])
cols.numeric <- c(cols.numeric, paste(cols.na.numeric, "toImputed", sep = ""))
cols.factor <- c(cols.factor, paste(cols.na.factor, "toImputed", sep = ""))
## cbind the created features about NAs
dt.explored <- cbind(dt.explored, vNaFactor, vNaNumeric, vNa)
dim(dt.explored)
#######################################################################################
## 2.0 save ###########################################################################
#######################################################################################
dt.imputed <- dt.explored
save(dt.imputed, cols.factor, cols.numeric, cols.integer, cols.newFeatures, file = "../data/BNP_Paribas_Cardif_Claims_Management/RData/dt_imputed.RData")
cols.factor
dt.factorRank <- ConvertNonNumFactorToOrderedNum(dt.imputed, cols.factor)
dt.factorRank
dt.factorRank <- ConvertNonNumFactorToOrderedNum(dt.imputed, cols.factor)
pre.factorRank <- preProcess(dt.factorRank
, method = c("range")
, verbose = T)
dt.factorRank.range <- predict(pre.factorRank, dt.factorRank)
dt.factorRank.range
require(scales)
?range
class(dt.factorRank$v24toOrderedNum)
dt.factorRank <- dt.factorRank[, lapply(.SD, as.numeric)]
head(dt.factorRank$v107toImputedtoOrderedNum)
tail(dt.factorRank$v107toImputedtoOrderedNum)
class(frank(c(1, 3, 2, 1)))
dt <- data.table(A = as.factor(c(1, 2, 3, 4)))
dt
dt[, lapply(.SD, as.numeric)]
dt.factorRank <- ConvertNonNumFactorToOrderedNum(dt.imputed, cols.factor)
head(dt.factorRank$v24toOrderedNum)
dt.factorRank <- dt.factorRank[, lapply(.SD, as.numeric)]
head(dt.factorRank$v24toOrderedNum)
class(dt.factorRank$v24toOrderedNum)
pre.factorRank <- preProcess(dt.factorRank
, method = c("range")
, verbose = T)
dt.factorRank.range <- predict(pre.factorRank, dt.factorRank)
dt.factorRank.range
hist(dt.factorRank.range$v3toImputedtoOrderedNum)
hist(dt.factorRank$v3toImputedtoOrderedNum)
hist(dt.imputed$v3toImputed)
table(dt.imputed$v3toImputed)
range(dt.factorRank$v3toImputedtoOrderedNum)
rowSums(dt.factorRank.range)
vFactorRankSum <- rowSums(dt.factorRank.range)
cols.factor <- cols.factor[!cols.factor %in% "v107toImputed"]
# Data
norm = rep(1:5, times=c(33,6,6,11,2))
abnorm = rep(1:5, times=c(3,2,2,11,33))
testres = c(abnorm,norm)
truestat = c(rep(1,length(abnorm)), rep(0,length(norm)))
# Summary table (Table I in the paper)
( tab=as.matrix(table(truestat, testres)) )
tab
( tot=colSums(tab) )                            # Number of patients with each type of test result
( truepos=unname(rev(cumsum(rev(tab[2,])))) )   # Number of true positives
( falsepos=unname(rev(cumsum(rev(tab[1,])))) )  # Number of false positives
( totpos=sum(tab[2,]) )                         # The total number of positives (one number)
( totneg=sum(tab[1,]) )                         # The total number of negatives (one number)
(sens=truepos/totpos)                           # Sensitivity (fraction true positives)
(omspec=falsepos/totneg)                        # 1 − specificity (false positives)
sens=c(sens,0); omspec=c(omspec,0)              # Numbers when we classify all patients as normal
tab
truepos
rev(truepos)
tp <- cumsum(tab[2, ])
tp
tpr <- tp / sum(tab[2, ])
tpr
sens
fp <- cumsum(tab[1, ])
fpr <- fp / sum(tab[1, ])
fpr
1 - fpr
omspec
sensNew <- tp / sum(tab[2, ] + tab[1, ])
sensNew
sensNew <- tp / tp + fp
sensNew
sensNew <- tp / (tp + fp)
sensNew
sensNew <- cumsum(tab[2, ]) / sum(tab[2, ])
sensNew
speNew <- 1 - cumsum(tab[1, ]) / sum(tab[1, ])
speNew
sens
tab
truepos
(rev(cumsum(rev(tab[2,]))))
rev(cumsum(rev(tab[1,]))))
rev(cumsum(rev(tab[1,])))
tab=as.matrix(table(rev(truestat), rev(testres)) ))
tab=as.matrix(table(rev(truestat), rev(testres)) )
tab
tab=as.matrix(table(truestat = rev(truestat), testres = rev(testres)) )
tab
tp <- cumsum(tab[1, ])
tp
fp <- cumsum(tab[2, ])
fp
tn <- cumsum(tab[2, ])
sens <- tp / sum(tab[1, ])
sens
spes <- 1 - tn/sum(tab[2, ])
spes
# Data
norm = rep(1:5, times=c(33,6,6,11,2))
abnorm = rep(1:5, times=c(3,2,2,11,33))
testres = c(abnorm,norm)
truestat = c(rep(1,length(abnorm)), rep(0,length(norm)))
# Summary table (Table I in the paper)
( tab=as.matrix(table(truestat, testres)) )
( tot=colSums(tab) )                            # Number of patients with each type of test result
( truepos=unname(rev(cumsum(rev(tab[2,])))) )   # Number of true positives
( falsepos=unname(rev(cumsum(rev(tab[1,])))) )  # Number of false positives
( totpos=sum(tab[2,]) )                         # The total number of positives (one number)
( totneg=sum(tab[1,]) )                         # The total number of negatives (one number)
(sens=truepos/totpos)                           # Sensitivity (fraction true positives)
(omspec=falsepos/totneg)                        # 1 − specificity (false positives)
sens=c(sens,0); omspec=c(omspec,0)              # Numbers when we classify all patients as normal
tab
tab = t(tab)
tab
new_totpos <- sum(tab, 2)
new_totpos
new_totpos <- sum(tab[. 2])
new_totpos <- sum(tab[, 2])
new_totpos
new_totneg <- sum(tab[, 1])
new_totneg
( tab=as.matrix(table(truestat = rev(truestat), testres = rev(testres)) ))
tab
( tab=as.matrix(table(truestat = rev(truestat), testres = rev(testres)) ))
tab
tab = t(tab)
tab
cols.numeric <- c(cols.numeric, "vFactorRankSum")
tab
( tab=as.matrix(table(truestat = rev(truestat), testres = rev(testres)) ))
( tab=as.matrix(table(truestat = rev(truestat), testres = rev(testres)) ))
( tab=as.matrix(table(truestat = truestat, testres = testres)) )
truestat
tab
tab = tab[c(2, 1), c(5:1)]
tab
tab = t(tab)
tab
tp <- cumsum(tab[1, ])
tp <- cumsum(tab[, 1])
tp
fp <- cumsum(tab[, 2])
fp
totpos <- sum(tab[, 1])
totneg <- sum(tab[, 2])
sens = tp / totpos
spec = fp / totneg
sens
spec
sens <- c(0, sens)
spec <- c(0, spec)
plot(sens, spec)
plot(spec, sens)
plot(spec, sens, type = "b")
# Data
norm = rep(1:5, times=c(33,6,6,11,2))
abnorm = rep(1:5, times=c(3,2,2,11,33))
testres = c(abnorm,norm)
truestat = c(rep(1,length(abnorm)), rep(0,length(norm)))
# Summary table (Table I in the paper)
( tab=as.matrix(table(truestat, testres)) )
( tot=colSums(tab) )                            # Number of patients with each type of test result
( truepos=unname(rev(cumsum(rev(tab[2,])))) )   # Number of true positives
( falsepos=unname(rev(cumsum(rev(tab[1,])))) )  # Number of false positives
( totpos=sum(tab[2,]) )                         # The total number of positives (one number)
( totneg=sum(tab[1,]) )                         # The total number of negatives (one number)
(sens=truepos/totpos)                           # Sensitivity (fraction true positives)
(omspec=falsepos/totneg)                        # 1 − specificity (false positives)
sens=c(sens,0); omspec=c(omspec,0)              # Numbers when we classify all patients as normal
